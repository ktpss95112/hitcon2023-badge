class EventManager:
    """
    We coordinate communication between the Model, View, and Controller.
    """

    def __init__(self):
        self.listeners = []

    def register_listener(self, listener):
        self.listeners.append(listener)

    def unregister_listener(self, listener):
        self.listeners.remove(listener)

    def post(self, event):
        for listener in self.listeners:
            listener.notify(event)


class BaseEvent:
    """
    A superclass for any events that might be generated by
    an object and sent to the EventManager.
    """

    name = "Generic event"

    def __init__(self):
        pass

    def __str__(self):
        return self.name


class EventInitialize(BaseEvent):
    name = "Initialize event"


class EventQuit(BaseEvent):
    name = "Quit event"


class EventStateChange(BaseEvent):
    name = "StateChange event"

    def __init__(self, state):
        self.state = state

    def __str__(self):
        return f"{self.name} => StateTo: {self.state}"


class EventEveryTick(BaseEvent):
    name = "Tick event"


class EventGameOver(BaseEvent):
    name = "Game over event"


class EventPlayerJump(BaseEvent):
    def __init__(self, player_id=0, jump_cnt=0):
        self.player_id = player_id
        self.jump_cnt = jump_cnt

    name = "PlayerJump event"


class EventRestart(BaseEvent):
    name = "Restart event"


class EventReaderReset(BaseEvent):
    name = "Reader Reset event"
